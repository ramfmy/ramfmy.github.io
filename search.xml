<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[ansible入门笔记]]></title>
    <url>%2F2019%2F05%2F01%2Fansible%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安装ansible通过yum安装如果是CentOS用户，那么需要配置EPEL1yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 安装yum 1sudo yum install ansible 配置远程客户端为了方便，将各个客户端定义如下： 定义： 主机1 master 主机2 node1 主机3 node2 目的是想让主机1可以控制主机2主机3 假如master的ip是：20.1.0.118node1的ip是：20.1.0.111node2的ip是：20.1.0.115 我们将node1和node2添加到master的/etc/ansible/hosts中，如下： 12node1 ansible_ssh_host=20.1.0.111 ansible_ssh_user=&quot;root&quot;node2 ansible_ssh_host=20.1.0.115 ansible_ssh_user=&quot;root&quot; 我们这里只指定ansible_ssh_user，所以我们希望的是可以无密登陆，关于无密登陆，下一节会进行介绍。 当hosts配置好后，我们可以使用 1ansible all -m ping 输出为12345678910&lt;kubenetes-k8s-master-572wkabn2gov.novalocal:root&gt;/root/ansible:&gt; ansible all -m pingnode1 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;node2 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125; 说明配置成功了。 ssh-copy-id实现ssh无密码登陆远程主机 ssh-keygen 产生公钥与私钥对 ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中， 定义： 主机1 主机2 目的是想让主机1可以无密访问主机2 step1在主机1上产生公钥私钥对 1ssh-keygen 当前测试产生的密钥对是在当前文件夹中，然后pwd一下，看看路径，下一步用得到 step2用ssh-copy-id将公钥复制到远程机器中 1ssh-copy-id -i 公钥路径/公钥名.pub 用户名@主机2IP 例如1ssh-copy-id -i /root/.ssh/id_rsa.pub root@20.1.0.111 step3无密访问测试在主机1上 1ssh root@20.1.0.111 不需要输入密码就可以访问了 简单的例子命令行模式1ansible node2 -m yum -a &quot;name=vim state=latest&quot; 该命令会在node2上安装最新版的vim 此处测试时失败，安装完第一步中的EPEL后解决 单文件模式 操作文件hello.yml1234- hosts: node1 tasks: - name: say hello shell: echo &quot;hello world&quot; &gt; /root/hello 运行1ansible-playbook hello.yml 运行完后，登陆node1，在root目录下，有hello文件，并且内容是hello world。 关于内容的格式我现在很困惑，比如说下面的格式也是可以通过的： 1234567---- name: say hello hosts: node1 tasks: - name: say hello shell: echo &quot;hello world&quot; &gt; /root/hello 安装软件git.yml123456---- name: say hello hosts: node2 tasks: - name: say hello yum: name=git state=latest 多文件模式和上一节中的一样，我们引用task的概念后，来进行安装git等操作，引用task的好处是，如果我们需要操作多个node，并且每个node之间有相同的操作，这样我们就把操作划分为task，在相应的node下面的tasks下，调用这个task就好了。下面上例子。 上例子之前还是先说一下具体实现的功能吧，免得我记性这么差，以后自己都看不懂了。 在master上对node1和node2进行操作，node1执行的操作是，安装git，安装完成后，新建文件在/root/status，并且在里面写上内容”git is installed”，node2执行的操作是，安装vim，安装完成后，新建文件在/root/status,并且在里面协商内容”vim is installed”. 文件结构 12345678910111213&lt;kubenetes-k8s-master-572wkabn2gov.novalocal:root&gt;/root:&gt; tree ansibleansible├── main.yml└── roles ├── git │ └── tasks │ └── main.yaml └── vim └── tasks └── main.yaml5 directories, 3 files]]></content>
      <tags>
        <tag>OpenStack</tag>
      </tags>
  </entry>
</search>
