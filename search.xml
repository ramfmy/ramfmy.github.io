<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[jdk in linux]]></title>
    <url>%2F2019%2F05%2F02%2Ftest%2F</url>
    <content type="text"><![CDATA[https://baijiahao.baidu.com/s?id=1625874094501173729&amp;wfr=spider&amp;for=pc]]></content>
  </entry>
  <entry>
    <title><![CDATA[OpenStack中watchdog的使用]]></title>
    <url>%2F2019%2F05%2F02%2FOpenStack%E4%B8%ADwatchdog%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[安装watchdog硬件首先需要将创建虚机的Glance images 或者 Nova flavors的watchdog打开： Nova flavors设置方法openstack flavor set FLAVOR-NAME –property hw:watchdog_action=ACTION可以设置的ACTION： disabled：不使用watchdog设备 reset：强行重置虚拟机 poweroff：强行关闭虚拟机 pause：暂停虚拟机 none：只是启用watchdog，在虚拟机hang住时不执行任何操作 Glance images设置方法openstack image set IMAGE-NAME –property hw:watchdog_action=ACTION可以设置的ACTION： disabled：不使用watchdog设备 reset：强行重置虚拟机 poweroff：强行关闭虚拟机 pause：暂停虚拟机 none：只是启用watchdog，在虚拟机hang住时不执行任何操作 此步骤设置完成后，在/dev目录下会有watchdog 安装watchdog软件使用上面的flavor或者image创建虚机在虚机中做如下配置 安装watchdog包yum install -y watchdog 修改配置文件（添加或取消下面这行（还不知道什么时候应该添加什么时候应该取消））/etc/watchdog.confwatchdog-device = /dev/watchdog 启动watchdog服务systemctl enable watchdogsystemctl start watchdog 测试watchdog是否已经启动systemctl status watchdogdmesg | grep 6300 测试搞down掉虚机echo c &gt; /proc/sysrq-trigger等待虚机是否可以重启（reboot）（前提是前面的hw:watchdog_action=reset)]]></content>
      <categories>
        <category>OpenStack</category>
      </categories>
      <tags>
        <tag>OpenStack, WatchDog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ansible入门笔记]]></title>
    <url>%2F2019%2F05%2F01%2Fansible%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安装ansible通过yum安装如果是CentOS用户，那么需要配置EPEL1yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm 安装yum 1sudo yum install ansible 配置远程客户端为了方便，将各个客户端定义如下： 定义： 主机1 master 主机2 node1 主机3 node2 目的是想让主机1可以控制主机2主机3 假如master的ip是：20.1.0.118node1的ip是：20.1.0.111node2的ip是：20.1.0.115 我们将node1和node2添加到master的/etc/ansible/hosts中，如下： 12node1 ansible_ssh_host=20.1.0.111 ansible_ssh_user=&quot;root&quot;node2 ansible_ssh_host=20.1.0.115 ansible_ssh_user=&quot;root&quot; 我们这里只指定ansible_ssh_user，所以我们希望的是可以无密登陆，关于无密登陆，下一节会进行介绍。 当hosts配置好后，我们可以使用 1ansible all -m ping 输出为12345678910&lt;kubenetes-k8s-master-572wkabn2gov.novalocal:root&gt;/root/ansible:&gt; ansible all -m pingnode1 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125;node2 | SUCCESS =&gt; &#123; &quot;changed&quot;: false, &quot;ping&quot;: &quot;pong&quot;&#125; 说明配置成功了。 ssh-copy-id实现ssh无密码登陆远程主机 ssh-keygen 产生公钥与私钥对 ssh-copy-id 将本机的公钥复制到远程机器的authorized_keys文件中， 定义： 主机1 主机2 目的是想让主机1可以无密访问主机2 step1在主机1上产生公钥私钥对 1ssh-keygen 当前测试产生的密钥对是在当前文件夹中，然后pwd一下，看看路径，下一步用得到 step2用ssh-copy-id将公钥复制到远程机器中 1ssh-copy-id -i 公钥路径/公钥名.pub 用户名@主机2IP 例如1ssh-copy-id -i /root/.ssh/id_rsa.pub root@20.1.0.111 step3无密访问测试在主机1上 1ssh root@20.1.0.111 不需要输入密码就可以访问了 简单的例子命令行模式1ansible node2 -m yum -a &quot;name=vim state=latest&quot; 该命令会在node2上安装最新版的vim 此处测试时失败，安装完第一步中的EPEL后解决 单文件模式 操作文件hello.yml1234- hosts: node1 tasks: - name: say hello shell: echo &quot;hello world&quot; &gt; /root/hello 运行1ansible-playbook hello.yml 运行完后，登陆node1，在root目录下，有hello文件，并且内容是hello world。 关于内容的格式我现在很困惑，比如说下面的格式也是可以通过的： 1234567---- name: say hello hosts: node1 tasks: - name: say hello shell: echo &quot;hello world&quot; &gt; /root/hello 安装软件git.yml123456---- name: say hello hosts: node2 tasks: - name: say hello yum: name=git state=latest 多文件模式和上一节中的一样，我们引用task的概念后，来进行安装git等操作，引用task的好处是，如果我们需要操作多个node，并且每个node之间有相同的操作，这样我们就把操作划分为task，在相应的node下面的tasks下，调用这个task就好了。下面上例子。 上例子之前还是先说一下具体实现的功能吧，免得我记性这么差，以后自己都看不懂了。 在master上对node1和node2进行操作，node1执行的操作是，安装git，安装完成后，新建文件在/root/status，并且在里面写上内容”git is installed”，node2执行的操作是，安装vim，安装完成后，新建文件在/root/status,并且在里面协商内容”vim is installed”. 文件结构 12345678910111213&lt;kubenetes-k8s-master-572wkabn2gov.novalocal:root&gt;/root:&gt; tree ansibleansible├── main.yml└── roles ├── git │ └── tasks │ └── main.yaml └── vim └── tasks └── main.yaml5 directories, 3 files]]></content>
      <categories>
        <category>Ansible</category>
      </categories>
      <tags>
        <tag>OpenStack</tag>
      </tags>
  </entry>
</search>
